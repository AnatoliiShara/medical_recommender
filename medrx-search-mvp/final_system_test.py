import sys
import pandas as pd
sys.path.append('src')

from search.enhanced_medical_assistant import EnhancedMedicalAssistant, SearchConfig

print("=== –§–Ü–ù–ê–õ–¨–ù–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–û–ö–†–ê–©–ï–ù–û–á –°–ò–°–¢–ï–ú–ò ===")

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–≤–Ω–∏–π –¥–∞—Ç–∞—Å–µ—Ç
df = pd.read_parquet("/home/anatolii-shara/Documents/scraping_compendium/compendium_all.parquet")

# –°—Ç–≤–æ—Ä—é—î–º–æ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω—É –≤–∏–±—ñ—Ä–∫—É –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è–º–∏
balanced_terms = {
    '–≥—ñ–ø–µ—Ä—Ç–µ–Ω–∑—ñ': 30,      # –≥—ñ–ø–µ—Ä—Ç–µ–Ω–∑—ñ—è
    '—Å–µ—Ä—Ü–µ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω': 30, # —Å–µ—Ä—Ü–µ–≤–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ—Å—Ç—å  
    '–¥—ñ–∞–±–µ—Ç': 25,          # —Ü—É–∫—Ä–æ–≤–∏–π –¥—ñ–∞–±–µ—Ç
    '–≥–æ–ª–æ–≤–Ω –±—ñ–ª': 20,      # –≥–æ–ª–æ–≤–Ω–∏–π –±—ñ–ª—å
    '–∞—Å—Ç–º': 15,            # –∞—Å—Ç–º–∞
}

selected_indices = []
for term, max_count in balanced_terms.items():
    count = 0
    for idx, row in df.iterrows():
        if count >= max_count:
            break
        indications = str(row.get('–ü–æ–∫–∞–∑–∞–Ω–Ω—è', '')).lower()
        if term in indications and idx not in selected_indices:
            selected_indices.append(idx)
            count += 1

test_df = df.iloc[selected_indices].copy()
print(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –¥–∞—Ç–∞—Å–µ—Ç: {len(test_df)} –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤")

# –¢–µ—Å—Ç—É—î–º–æ –∑ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
print("\n[1] ENHANCED ASSISTANT –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é:")
assistant = EnhancedMedicalAssistant()
assistant.build_from_dataframe(
    test_df, 
    encoder_model=None,
    medical_chunking=True,
    max_chunk_tokens=100  # –ó–º–µ–Ω—à—É—î–º–æ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è warning
)

# –¢–µ—Å—Ç–æ–≤—ñ –∑–∞–ø–∏—Ç–∏
test_queries = [
    "–∞—Ä—Ç–µ—Ä—ñ–∞–ª—å–Ω–∞ –≥—ñ–ø–µ—Ä—Ç–µ–Ω–∑—ñ—è",
    "—Å–µ—Ä—Ü–µ–≤–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ—Å—Ç—å", 
    "—Ü—É–∫—Ä–æ–≤–∏–π –¥—ñ–∞–±–µ—Ç",
    "–≥–æ–ª–æ–≤–Ω–∏–π –±—ñ–ª—å",
    "–∞—Å—Ç–º–∞"
]

config = SearchConfig(show=3)

for query in test_queries:
    print(f"\n{'='*50}")
    print(f"üîç –ó–ê–ü–ò–¢: '{query}'")
    print(f"{'='*50}")
    
    results = assistant.search(query, config)
    
    if results:
        for i, drug in enumerate(results):
            print(f"{i+1}. {drug['drug_name']}")
            print(f"   üìà Score: {drug['best_score']:.3f}")
            print(f"   üìã Passages: {len(drug['passages'])}")
            if drug['indications']:
                ind_preview = drug['indications'][:150] + "..." if len(drug['indications']) > 150 else drug['indications']
                print(f"   üè• –ü–æ–∫–∞–∑–∞–Ω–Ω—è: {ind_preview}")
    else:
        print("   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

print(f"\n‚úÖ –§–Ü–ù–ê–õ–¨–ù–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!")
print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
print(f"   - –¢–µ—Å—Ç–æ–≤–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤: {len(test_df)}")  
print(f"   - Passages —Å—Ç–≤–æ—Ä–µ–Ω–æ: {len(assistant.passages)}")
print(f"   - –°–µ—Ä–µ–¥–Ω—è –¥–æ–≤–∂–∏–Ω–∞ passage: {sum(len(p) for p in assistant.passages) / len(assistant.passages):.0f} —Å–∏–º–≤–æ–ª—ñ–≤")

