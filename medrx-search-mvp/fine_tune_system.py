import sys
import pandas as pd
sys.path.append('src')

from search.enhanced_medical_assistant import EnhancedMedicalAssistant, SearchConfig

print("=== –¢–û–ß–ö–û–í–ï –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò ===")

# –¢–µ—Å—Ç–æ–≤–∏–π –¥–∞—Ç–∞—Å–µ—Ç –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏
df = pd.read_parquet("/home/anatolii-shara/Documents/scraping_compendium/compendium_all.parquet")

# –§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –∑–∞–ø–∏—Ç–∞—Ö
problem_queries = {
    "—Ü—É–∫—Ä–æ–≤–∏–π –¥—ñ–∞–±–µ—Ç": ["–¥—ñ–∞–±–µ—Ç", "–≥–ª—ñ–∫–µ–º—ñ", "—ñ–Ω—Å—É–ª—ñ–Ω", "–≥–ª—é–∫–æ–∑"],
    "–≥–æ–ª–æ–≤–Ω–∏–π –±—ñ–ª—å": ["–≥–æ–ª–æ–≤–Ω –±—ñ–ª", "–º—ñ–≥—Ä–µ–Ω", "—Ü–µ—Ñ–∞–ª–≥—ñ", "–±–æ–ª—é –≥–æ–ª–æ–≤"]
}

selected_indices = []
for query, terms in problem_queries.items():
    for term in terms:
        count = 0
        for idx, row in df.iterrows():
            if count >= 10:
                break
            indications = str(row.get('–ü–æ–∫–∞–∑–∞–Ω–Ω—è', '')).lower()
            if term in indications and idx not in selected_indices:
                selected_indices.append(idx)
                count += 1

test_df = df.iloc[selected_indices].copy()
print(f"–¶—ñ–ª—å–æ–≤–∏–π –¥–∞—Ç–∞—Å–µ—Ç: {len(test_df)} –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤")

# –¢–µ—Å—Ç –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º–∏ chunks –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è token warning
assistant = EnhancedMedicalAssistant()
assistant.build_from_dataframe(
    test_df, 
    encoder_model=None,
    medical_chunking=True,
    max_chunk_tokens=80  # –©–µ –º–µ–Ω—à–µ
)

print(f"Passages —Å—Ç–≤–æ—Ä–µ–Ω–æ: {len(assistant.passages)}")

# –¢–µ—Å—Ç—É—î–º–æ –ø—Ä–æ–±–ª–µ–º–Ω—ñ –∑–∞–ø–∏—Ç–∏
for query in ["—Ü—É–∫—Ä–æ–≤–∏–π –¥—ñ–∞–±–µ—Ç", "–≥–æ–ª–æ–≤–Ω–∏–π –±—ñ–ª—å"]:
    print(f"\nüîç –ó–ê–ü–ò–¢: '{query}'")
    results = assistant.search(query, SearchConfig(show=3))
    
    for i, drug in enumerate(results):
        print(f"{i+1}. {drug['drug_name']} (Score: {drug['best_score']:.3f})")
        print(f"   –ü–æ–∫–∞–∑–∞–Ω–Ω—è: {drug['indications'][:100]}...")

